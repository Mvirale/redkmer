#!/bin/bash

printf "======= Running Redkmer =======\n"

# ---------------------------------- Dataset specific configurations ---------------------------------------------------------------

# path to the working directories
BASEDIR=/media/nikolai/DATADRIVE1/BioTools/redkmer
CWD=simulateddatasets/complex

# path to the male pacbio data
pacDIR=testreadspac
pacM=${CWD}/${pacDIR}/m_pac.fasta

# path to the illumina data
illDIR=testreadsill
illM=${CWD}/${illDIR}/m.fastq
illF=${CWD}/${illDIR}/f.fastq

# path to the mitochondrial Reference
MtREF=${CWD}/refgenome/M.fasta

# path to genome assembly if available - needed to step 6
genome=$CWD/refgenome/MaleGenome.fasta

# length cuttoff for pacBIO reads to be included in bins
pac_length=2000

# length normalized sum of illumina reads mapping of pacBio reads cutoff
LSum=50

#kmer X chromosome specificity index (0= no specificity; 1= full X specificity; 0.5= half of the kmer hits are on other chromosomes
XSI=0.9

#define minimum CQ value for X chromosome reads/kmers  = maximum CQ value for autosomal reads/kmers
xmin=1.5

#define maximum CQ value for X chromosome reads/kmers  = minimum  CQ value for GA reads/kmer
xmax=10

#define maximum CQ value for Y chromosome reads/kmers = minimum CQ value for autosomal reads/kmers
ymax=0.2

# Generate redkmer.cfg.R file
echo "Rworkdir <- \"${BASEDIR}/${CWD}\"" > redkmer.cfg.R
echo "xmin <-"$xmin"" >> redkmer.cfg.R
echo "xmax <-"$xmax"" >> redkmer.cfg.R
echo "ymax <-"$ymax"" >> redkmer.cfg.R

#---------------------------------- Machine specific configuration ---------------------------------------------------------------

# number of CPUs and memory to use
CORES=8
LESSCORES=4

# run in docker? 1=yes 0=no
RUNINDOCKER=1
# run in cluster? 1=yes 0=no
RUNINCLUSTER=0

# setting default paths to the tool-binaries
BOWTIE=bowtie
BOWTIEB=bowtie-build
BOWTIE2=bowtie2
BOWTIE2B=bowtie2-build
SAMTOOLS=samtools
JFISH=jellyfish
BLAST=blastn
FASTQC=fastqc
BLAST_DB=makeblastdb
BEDTOOLS=bedtools

if [[ "$RUNINDOCKER" -eq "1" ]]; then
echo "RUNNING IN DOCKER"
DRUN="docker run --rm -v ${BASEDIR}:/data --workdir /data -i"
#--user=biodocker

BOWTIE_IMAGE=biodckr/bowtie
docker pull $BOWTIE_IMAGE
BOWTIE="$DRUN $BOWTIE_IMAGE bowtie"
BOWTIEB="$DRUN $BOWTIE_IMAGE bowtie-build"

BOWTIE2_IMAGE=biodckr/bowtie2
docker pull $BOWTIE2_IMAGE
BOWTIE2="$DRUN $BOWTIE2_IMAGE bowtie2"
BOWTIEB2="$DRUN $BOWTIE2_IMAGE bowtie2-build"

SAMTOOLS_IMAGE=biodckr/samtools
docker pull $SAMTOOLS_IMAGE
SAMTOOLS="$DRUN $SAMTOOLS_IMAGE $SAMTOOLS"

JFISH_IMAGE=biodckrdev/jellyfish
docker pull $JFISH_IMAGE
JFISH="$DRUN $JFISH_IMAGE $JFISH"

FASTQC_IMAGE=conradstoerker/fastqc
docker pull $FASTQC_IMAGE
FASTQC="$DRUN $FASTQC_IMAGE $FASTQC"

BLAST_IMAGE=biodckr/blast
docker pull $BLAST_IMAGE
BLAST="$DRUN $BLAST_IMAGE $BLAST"
BLAST_DB="$DRUN $BLAST_IMAGE $BLAST_DB"

BEDTOOLS_IMAGE=biodckr/bedtools
docker pull $BEDTOOLS_IMAGE
BEDTOOLS="$DRUN $BEDTOOLS_IMAGE $BEDTOOLS"

else
echo "RUNNING USING LOCAL BINARIES"
fi

printf "Obtained run data from ${runfile}\n"
printf "Working Directory: ${CWD}\n"
printf "Pacbio Read Directory: ${pacDIR}\n"
printf "Illumina Read Directory: ${illDIR}\n"


